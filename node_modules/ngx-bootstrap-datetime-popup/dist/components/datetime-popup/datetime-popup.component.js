import { Component, EventEmitter, Input, Output } from '@angular/core';
var DatetimePopupComponent = /** @class */ (function () {
    function DatetimePopupComponent() {
        this.valueChange = new EventEmitter();
        this.showPopup = false;
        this.showPopupChange = new EventEmitter();
        this.showDate = true;
        this.showTime = true;
        this.showWeeks = false;
        this.datepickerMode = 'day';
        this.initDate = null;
        this.minDate = null;
        this.maxDate = null;
        this.dateDisabled = [];
        this.localValue = null;
    }
    DatetimePopupComponent.prototype.ngOnChanges = function (changes) {
        if (!this.nowButton) {
            this.nowButton = { show: true, label: 'Now', cssClass: 'btn btn-secondary btn-sm' };
        }
        if (!this.clearButton) {
            this.clearButton = { show: true, label: 'Clear', cssClass: 'btn btn-secondary btn-sm' };
        }
        if (!this.closeButton) {
            this.closeButton = { show: true, label: 'Close', cssClass: 'btn btn-secondary btn-sm' };
        }
        // user maybe typing a value into an input box, so would come in as string
        if (typeof this.value === 'string') {
            // check if the string is a valid date
            if (!isNaN(new Date(this.value).getTime())) {
                this.localValue = new Date(this.value);
            }
        }
        else if (this.value) {
            this.localValue = this.value;
        }
    };
    DatetimePopupComponent.prototype.offClick = function () {
        this.showPopup = false;
        this.showPopupChange.emit(false);
    };
    DatetimePopupComponent.prototype.onNow = function () {
        this.localValue = new Date();
        this.onPickerChange();
    };
    DatetimePopupComponent.prototype.onClear = function () {
        this.valueChange.emit(null);
    };
    DatetimePopupComponent.prototype.onPickerChange = function () {
        this.valueChange.emit(this.localValue);
        // close when value changed if only using date
        if (this.showDate === true && this.showTime === false) {
            this.offClick();
        }
    };
    DatetimePopupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datetime-popup',
                    template: "\n    <div class=\"dropdown\" [ngClass]=\"{ 'show': showPopup === true }\" (offClick)=\"offClick()\">\n      <ul class=\"dropdown-menu\" role=\"menu\" [ngClass]=\"{ 'show': showPopup === true }\">\n        <li class=\"my-2 mx-2\">\n          <datepicker *ngIf=\"showDate\"\n                      [(ngModel)]=\"localValue\"\n                      (ngModelChange)=\"onPickerChange()\"\n                      [showWeeks]=\"showWeeks\"\n                      [datepickerMode]=\"datepickerMode\"\n                      [minDate]=\"minDate\"\n                      [maxDate]=\"maxDate\"\n                      [dateDisabled]=\"dateDisabled\"></datepicker>\n          <timepicker *ngIf=\"showTime\"\n                      [(ngModel)]=\"localValue\"\n                      (ngModelChange)=\"onPickerChange()\"></timepicker>\n        </li>\n        <li class=\"mx-2 mb-2\">\n          <span class=\"btn-group pull-left\">\n              <button type=\"button\" (click)=\"onNow()\"\n                      *ngIf=\"nowButton.show\"\n                      [ngClass]=\"nowButton.cssClass\">{{ nowButton.label }}</button>\n              <button type=\"button\" (click)=\"onClear()\"\n                      *ngIf=\"clearButton.show\"\n                      [ngClass]=\"clearButton.cssClass\">{{ clearButton.label }}</button>\n          </span>\n          <span class=\"btn-group pull-right\">\n              <button type=\"button\" (click)=\"offClick()\"\n                      *ngIf=\"closeButton.show\"\n                      [ngClass]=\"closeButton.cssClass\">{{ closeButton.label }}</button>\n          </span>\n        </li>\n      </ul>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    DatetimePopupComponent.ctorParameters = function () { return []; };
    DatetimePopupComponent.propDecorators = {
        'value': [{ type: Input },],
        'valueChange': [{ type: Output },],
        'showPopup': [{ type: Input },],
        'showPopupChange': [{ type: Output },],
        'showDate': [{ type: Input },],
        'showTime': [{ type: Input },],
        'showWeeks': [{ type: Input },],
        'datepickerMode': [{ type: Input },],
        'initDate': [{ type: Input },],
        'minDate': [{ type: Input },],
        'maxDate': [{ type: Input },],
        'dateDisabled': [{ type: Input },],
        'nowButton': [{ type: Input },],
        'clearButton': [{ type: Input },],
        'closeButton': [{ type: Input },],
    };
    return DatetimePopupComponent;
}());
export { DatetimePopupComponent };
//# sourceMappingURL=datetime-popup.component.js.map